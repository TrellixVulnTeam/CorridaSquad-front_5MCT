{"ast":null,"code":"import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  return operate(function (source, subscriber) {\n    var activeTask = null;\n    var lastValue = null;\n    var lastTime = null;\n\n    var emit = function () {\n      if (activeTask) {\n        activeTask.unsubscribe();\n        activeTask = null;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    function emitWhenIdle() {\n      var targetTime = lastTime + dueTime;\n      var now = scheduler.now();\n\n      if (now < targetTime) {\n        activeTask = this.schedule(undefined, targetTime - now);\n        subscriber.add(activeTask);\n        return;\n      }\n\n      emit();\n    }\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      lastValue = value;\n      lastTime = scheduler.now();\n\n      if (!activeTask) {\n        activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n        subscriber.add(activeTask);\n      }\n    }, function () {\n      emit();\n      subscriber.complete();\n    }, undefined, function () {\n      lastValue = activeTask = null;\n    }));\n  });\n}","map":{"version":3,"sources":["C:/Users/enobre/Desktop/corridaFront/node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js"],"names":["asyncScheduler","operate","OperatorSubscriber","debounceTime","dueTime","scheduler","source","subscriber","activeTask","lastValue","lastTime","emit","unsubscribe","value","next","emitWhenIdle","targetTime","now","schedule","undefined","add","subscribe","complete"],"mappings":"AAAA,SAASA,cAAT,QAA+B,oBAA/B;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,SAA/B,EAA0C;AAC7C,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAGL,cAAZ;AAA6B;;AACzD,SAAOC,OAAO,CAAC,UAAUK,MAAV,EAAkBC,UAAlB,EAA8B;AACzC,QAAIC,UAAU,GAAG,IAAjB;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,QAAQ,GAAG,IAAf;;AACA,QAAIC,IAAI,GAAG,YAAY;AACnB,UAAIH,UAAJ,EAAgB;AACZA,QAAAA,UAAU,CAACI,WAAX;AACAJ,QAAAA,UAAU,GAAG,IAAb;AACA,YAAIK,KAAK,GAAGJ,SAAZ;AACAA,QAAAA,SAAS,GAAG,IAAZ;AACAF,QAAAA,UAAU,CAACO,IAAX,CAAgBD,KAAhB;AACH;AACJ,KARD;;AASA,aAASE,YAAT,GAAwB;AACpB,UAAIC,UAAU,GAAGN,QAAQ,GAAGN,OAA5B;AACA,UAAIa,GAAG,GAAGZ,SAAS,CAACY,GAAV,EAAV;;AACA,UAAIA,GAAG,GAAGD,UAAV,EAAsB;AAClBR,QAAAA,UAAU,GAAG,KAAKU,QAAL,CAAcC,SAAd,EAAyBH,UAAU,GAAGC,GAAtC,CAAb;AACAV,QAAAA,UAAU,CAACa,GAAX,CAAeZ,UAAf;AACA;AACH;;AACDG,MAAAA,IAAI;AACP;;AACDL,IAAAA,MAAM,CAACe,SAAP,CAAiB,IAAInB,kBAAJ,CAAuBK,UAAvB,EAAmC,UAAUM,KAAV,EAAiB;AACjEJ,MAAAA,SAAS,GAAGI,KAAZ;AACAH,MAAAA,QAAQ,GAAGL,SAAS,CAACY,GAAV,EAAX;;AACA,UAAI,CAACT,UAAL,EAAiB;AACbA,QAAAA,UAAU,GAAGH,SAAS,CAACa,QAAV,CAAmBH,YAAnB,EAAiCX,OAAjC,CAAb;AACAG,QAAAA,UAAU,CAACa,GAAX,CAAeZ,UAAf;AACH;AACJ,KAPgB,EAOd,YAAY;AACXG,MAAAA,IAAI;AACJJ,MAAAA,UAAU,CAACe,QAAX;AACH,KAVgB,EAUdH,SAVc,EAUH,YAAY;AACtBV,MAAAA,SAAS,GAAGD,UAAU,GAAG,IAAzB;AACH,KAZgB,CAAjB;AAaH,GApCa,CAAd;AAqCH","sourcesContent":["import { asyncScheduler } from '../scheduler/async';\r\nimport { operate } from '../util/lift';\r\nimport { OperatorSubscriber } from './OperatorSubscriber';\r\nexport function debounceTime(dueTime, scheduler) {\r\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\r\n    return operate(function (source, subscriber) {\r\n        var activeTask = null;\r\n        var lastValue = null;\r\n        var lastTime = null;\r\n        var emit = function () {\r\n            if (activeTask) {\r\n                activeTask.unsubscribe();\r\n                activeTask = null;\r\n                var value = lastValue;\r\n                lastValue = null;\r\n                subscriber.next(value);\r\n            }\r\n        };\r\n        function emitWhenIdle() {\r\n            var targetTime = lastTime + dueTime;\r\n            var now = scheduler.now();\r\n            if (now < targetTime) {\r\n                activeTask = this.schedule(undefined, targetTime - now);\r\n                subscriber.add(activeTask);\r\n                return;\r\n            }\r\n            emit();\r\n        }\r\n        source.subscribe(new OperatorSubscriber(subscriber, function (value) {\r\n            lastValue = value;\r\n            lastTime = scheduler.now();\r\n            if (!activeTask) {\r\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\r\n                subscriber.add(activeTask);\r\n            }\r\n        }, function () {\r\n            emit();\r\n            subscriber.complete();\r\n        }, undefined, function () {\r\n            lastValue = activeTask = null;\r\n        }));\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}